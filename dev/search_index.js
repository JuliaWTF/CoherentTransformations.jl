var documenterSearchIndex = {"docs":
[{"location":"examples/logo/","page":"Logo Making","title":"Logo Making","text":"EditURL = \"https://github.com/JuliaWTF/CoherentTransformations.jl/blob/main/docs/examples/logo.jl\"","category":"page"},{"location":"examples/logo/#CoherentTransformations-logo-creation","page":"Logo Making","title":"CoherentTransformations logo creation","text":"","category":"section"},{"location":"examples/logo/","page":"Logo Making","title":"Logo Making","text":"We first generate 3 different circles for the Julia logo","category":"page"},{"location":"examples/logo/","page":"Logo Making","title":"Logo Making","text":"using Colors: JULIA_LOGO_COLORS, ARGB32, RGBA\nusing ImageShow\nusing MosaicViews: mosaicview\nusing Luxor\nred, green, blue, purple = JULIA_LOGO_COLORS;\nnothing #hide","category":"page"},{"location":"examples/logo/","page":"Logo Making","title":"Logo Making","text":"We create for images 200x200 containing each a disk","category":"page"},{"location":"examples/logo/","page":"Logo Making","title":"Logo Making","text":"circles = map((red, green, purple)) do color\n    buffer = zeros(ARGB32, 200, 200)\n    Drawing(buffer)\n    setcolor(color)\n    circle(Point(100, 100), 90; action=:fill)\n    finish()\n    buffer\nend;\nmosaicview(map(x->RGBA.(x), circles); nrow=1)","category":"page"},{"location":"examples/logo/","page":"Logo Making","title":"Logo Making","text":"Let's warp each disk with a different warping","category":"page"},{"location":"examples/logo/","page":"Logo Making","title":"Logo Making","text":"warped_circles = (\n    checker_warp(circles[1]; crop=false),\n    ridged_warp(circles[2]; crop=false, scaling=2.0),\n    cylinder_warp(circles[3]; crop=false, scaling=0.05),\n);\nmosaicview(map(x->RGBA.(x), warped_circles); nrow=1)","category":"page"},{"location":"examples/logo/","page":"Logo Making","title":"Logo Making","text":"We can now assemble all the images together in on polygon.","category":"page"},{"location":"examples/logo/","page":"Logo Making","title":"Logo Making","text":"Drawing(500, 500, \"logo.png\")\npoints = ngon(Point(250, 280), 150, 3, pi / 6; vertices=true)\nfor i in 1:3\n    placeimage(warped_circles[i], points[i] .- 100)\nend\nfinish()\npreview()","category":"page"},{"location":"examples/logo/","page":"Logo Making","title":"Logo Making","text":"Tada! (Image: Generated logo)","category":"page"},{"location":"examples/logo/","page":"Logo Making","title":"Logo Making","text":"","category":"page"},{"location":"examples/logo/","page":"Logo Making","title":"Logo Making","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/coherent_noise/","page":"First steps","title":"First steps","text":"EditURL = \"https://github.com/JuliaWTF/CoherentTransformations.jl/blob/main/docs/examples/coherent_noise.jl\"","category":"page"},{"location":"examples/coherent_noise/#example","page":"First steps","title":"Example of using CoherentNoise","text":"","category":"section"},{"location":"examples/coherent_noise/","page":"First steps","title":"First steps","text":"Let's show how to use CoherentTransformations in pair with CoherentNoise.jl. We first load a couple of useful packages","category":"page"},{"location":"examples/coherent_noise/","page":"First steps","title":"First steps","text":"using CoherentTransformations\nusing CoherentNoise\nusing ImageShow\nusing MosaicViews: mosaicview\nusing TestImages","category":"page"},{"location":"examples/coherent_noise/","page":"First steps","title":"First steps","text":"We can load a couple of images.","category":"page"},{"location":"examples/coherent_noise/","page":"First steps","title":"First steps","text":"fabio = testimage(\"fabio_color_512.png\")","category":"page"},{"location":"examples/coherent_noise/","page":"First steps","title":"First steps","text":"A boring landscape","category":"page"},{"location":"examples/coherent_noise/","page":"First steps","title":"First steps","text":"mountain = testimage(\"mountainstream.png\")","category":"page"},{"location":"examples/coherent_noise/","page":"First steps","title":"First steps","text":"A last one in black and white!","category":"page"},{"location":"examples/coherent_noise/","page":"First steps","title":"First steps","text":"cameraman = testimage(\"cameraman.tif\")","category":"page"},{"location":"examples/coherent_noise/","page":"First steps","title":"First steps","text":"And let's build a function to visualize all this","category":"page"},{"location":"examples/coherent_noise/","page":"First steps","title":"First steps","text":"function panorama(images)\n    return mosaicview(images; nrow=1)\nend\nimgs = (fabio, mountain, cameraman)\npanorama(imgs)","category":"page"},{"location":"examples/coherent_noise/","page":"First steps","title":"First steps","text":"Let's build a structured noise:","category":"page"},{"location":"examples/coherent_noise/","page":"First steps","title":"First steps","text":"checkered_noise = checkered_2d();\nnothing #hide","category":"page"},{"location":"examples/coherent_noise/","page":"First steps","title":"First steps","text":"We can use the noise_warp to apply it to the images:","category":"page"},{"location":"examples/coherent_noise/","page":"First steps","title":"First steps","text":"panorama(noise_warp.(imgs, Ref(checkered_noise)))","category":"page"},{"location":"examples/coherent_noise/","page":"First steps","title":"First steps","text":"There are a few premade functions in CoherentTransformations with preset settings.","category":"page"},{"location":"examples/coherent_noise/","page":"First steps","title":"First steps","text":"panorama(checker_warp.(imgs))","category":"page"},{"location":"examples/coherent_noise/","page":"First steps","title":"First steps","text":"Here are a few other examples:","category":"page"},{"location":"examples/coherent_noise/","page":"First steps","title":"First steps","text":"panorama(ridged_warp.(imgs))","category":"page"},{"location":"examples/coherent_noise/","page":"First steps","title":"First steps","text":"panorama(cylinder_warp.(imgs))","category":"page"},{"location":"examples/coherent_noise/","page":"First steps","title":"First steps","text":"panorama(sphere_warp.(imgs))","category":"page"},{"location":"examples/coherent_noise/","page":"First steps","title":"First steps","text":"","category":"page"},{"location":"examples/coherent_noise/","page":"First steps","title":"First steps","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = CoherentTransformations","category":"page"},{"location":"#CoherentTransformations","page":"Home","title":"CoherentTransformations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CoherentTransformations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CoherentTransformations is the beautiful combinations of CoherentNoise.jl and ImageTransformations.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A matrix of noise is generated with CoherentNoise and used to generate a vector field to translate different pixels. ImageTransformations takes care of reconstructing the pixels according to this map. At the end the image is cropped and resized to match the original image without any empty pixels.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The most important function is noise_warp which takes and image and a noise source to warp it.","category":"page"},{"location":"","page":"Home","title":"Home","text":"noise_warp","category":"page"},{"location":"#CoherentTransformations.noise_warp","page":"Home","title":"CoherentTransformations.noise_warp","text":"noise_warp(img, noise_source::AbstractSampler; squared = true, variance = 0.1, crop = true)\n\nnoise_warp takes both an img and a noise_source built from CoherentNoise.jl and returns a warpped image. The principle is simple:\n\nTwo matrices of noise are generated using noise_source.\nThese matrices are converted into vector field by centering the values around 0\n\nand scaling them with variance * size.\n\nThe vector field corresponds to the displacement of the pixels in the x/y coordinate field.\nImageTransformations apply the transformations and adaptively warp the image.\nIf crop is true, the image will be cropped to ensure no NaN values are contained.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"There are also a few helper functions to directly use existing settings, see for example checker_warp and the examples in Example.","category":"page"},{"location":"","page":"Home","title":"Home","text":"checker_warp\nridged_warp\ncylinder_warp\nsphere_warp","category":"page"},{"location":"#CoherentTransformations.checker_warp","page":"Home","title":"CoherentTransformations.checker_warp","text":"Use the checkered_2d noise from CoherenNoise for a checker effect\n\n\n\n\n\n","category":"function"},{"location":"#CoherentTransformations.ridged_warp","page":"Home","title":"CoherentTransformations.ridged_warp","text":"Use a combination of opensimplex2_3d and ridged_fractal_3d for a ridged effect.\n\n\n\n\n\n","category":"function"},{"location":"#CoherentTransformations.cylinder_warp","page":"Home","title":"CoherentTransformations.cylinder_warp","text":"Use the cylinders_2d noise from CoherenNoise for a cylinder effect\n\n\n\n\n\n","category":"function"},{"location":"#CoherentTransformations.sphere_warp","page":"Home","title":"CoherentTransformations.sphere_warp","text":"Use the spheres_3d noise from CoherenNoise for a spherical effect\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"There is also the helper function.","category":"page"},{"location":"","page":"Home","title":"Home","text":"gen_coherent_matrix","category":"page"},{"location":"#CoherentTransformations.gen_coherent_matrix","page":"Home","title":"CoherentTransformations.gen_coherent_matrix","text":"This is a cheaper version of gen_image from CoherentNoise, which does not generate a RGB matrix but a matrix of type T.\n\n\n\n\n\n","category":"function"}]
}
